// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/helloworld/v1/realworld.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTagsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTagsRequestMultiError,
// or nil if none found.
func (m *GetTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTagsRequestMultiError(errors)
	}

	return nil
}

// GetTagsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagsRequestMultiError) AllErrors() []error { return m }

// GetTagsRequestValidationError is the validation error returned by
// GetTagsRequest.Validate if the designated constraints aren't met.
type GetTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagsRequestValidationError) ErrorName() string { return "GetTagsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagsRequestValidationError{}

// Validate checks the field values on FavoriteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FavoriteArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FavoriteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FavoriteArticleRequestMultiError, or nil if none found.
func (m *FavoriteArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FavoriteArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return FavoriteArticleRequestMultiError(errors)
	}

	return nil
}

// FavoriteArticleRequestMultiError is an error wrapping multiple validation
// errors returned by FavoriteArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type FavoriteArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoriteArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoriteArticleRequestMultiError) AllErrors() []error { return m }

// FavoriteArticleRequestValidationError is the validation error returned by
// FavoriteArticleRequest.Validate if the designated constraints aren't met.
type FavoriteArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoriteArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoriteArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoriteArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoriteArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoriteArticleRequestValidationError) ErrorName() string {
	return "FavoriteArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FavoriteArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavoriteArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoriteArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoriteArticleRequestValidationError{}

// Validate checks the field values on UnFavoriteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnFavoriteArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnFavoriteArticleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnFavoriteArticleRequestMultiError, or nil if none found.
func (m *UnFavoriteArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnFavoriteArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return UnFavoriteArticleRequestMultiError(errors)
	}

	return nil
}

// UnFavoriteArticleRequestMultiError is an error wrapping multiple validation
// errors returned by UnFavoriteArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type UnFavoriteArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnFavoriteArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnFavoriteArticleRequestMultiError) AllErrors() []error { return m }

// UnFavoriteArticleRequestValidationError is the validation error returned by
// UnFavoriteArticleRequest.Validate if the designated constraints aren't met.
type UnFavoriteArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnFavoriteArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnFavoriteArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnFavoriteArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnFavoriteArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnFavoriteArticleRequestValidationError) ErrorName() string {
	return "UnFavoriteArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnFavoriteArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnFavoriteArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnFavoriteArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnFavoriteArticleRequestValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on AddCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentRequestMultiError, or nil if none found.
func (m *AddCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Slug

	if len(errors) > 0 {
		return AddCommentRequestMultiError(errors)
	}

	return nil
}

// AddCommentRequestMultiError is an error wrapping multiple validation errors
// returned by AddCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRequestMultiError) AllErrors() []error { return m }

// AddCommentRequestValidationError is the validation error returned by
// AddCommentRequest.Validate if the designated constraints aren't met.
type AddCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequestValidationError) ErrorName() string {
	return "AddCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequestValidationError{}

// Validate checks the field values on GetArticleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleRequestMultiError, or nil if none found.
func (m *GetArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return GetArticleRequestMultiError(errors)
	}

	return nil
}

// GetArticleRequestMultiError is an error wrapping multiple validation errors
// returned by GetArticleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleRequestMultiError) AllErrors() []error { return m }

// GetArticleRequestValidationError is the validation error returned by
// GetArticleRequest.Validate if the designated constraints aren't met.
type GetArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleRequestValidationError) ErrorName() string {
	return "GetArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleRequestValidationError{}

// Validate checks the field values on DeleteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleRequestMultiError, or nil if none found.
func (m *DeleteArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	if len(errors) > 0 {
		return DeleteArticleRequestMultiError(errors)
	}

	return nil
}

// DeleteArticleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleRequestMultiError) AllErrors() []error { return m }

// DeleteArticleRequestValidationError is the validation error returned by
// DeleteArticleRequest.Validate if the designated constraints aren't met.
type DeleteArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleRequestValidationError) ErrorName() string {
	return "DeleteArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleRequestValidationError{}

// Validate checks the field values on UpdateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleRequestMultiError, or nil if none found.
func (m *UpdateArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArticleRequestValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Slug

	if len(errors) > 0 {
		return UpdateArticleRequestMultiError(errors)
	}

	return nil
}

// UpdateArticleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleRequestMultiError) AllErrors() []error { return m }

// UpdateArticleRequestValidationError is the validation error returned by
// UpdateArticleRequest.Validate if the designated constraints aren't met.
type UpdateArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleRequestValidationError) ErrorName() string {
	return "UpdateArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleRequestValidationError{}

// Validate checks the field values on CreateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleRequestMultiError, or nil if none found.
func (m *CreateArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateArticleRequestValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArticleRequestValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateArticleRequestMultiError(errors)
	}

	return nil
}

// CreateArticleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleRequestMultiError) AllErrors() []error { return m }

// CreateArticleRequestValidationError is the validation error returned by
// CreateArticleRequest.Validate if the designated constraints aren't met.
type CreateArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleRequestValidationError) ErrorName() string {
	return "CreateArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleRequestValidationError{}

// Validate checks the field values on FeedArticlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedArticlesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedArticlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedArticlesRequestMultiError, or nil if none found.
func (m *FeedArticlesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedArticlesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return FeedArticlesRequestMultiError(errors)
	}

	return nil
}

// FeedArticlesRequestMultiError is an error wrapping multiple validation
// errors returned by FeedArticlesRequest.ValidateAll() if the designated
// constraints aren't met.
type FeedArticlesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedArticlesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedArticlesRequestMultiError) AllErrors() []error { return m }

// FeedArticlesRequestValidationError is the validation error returned by
// FeedArticlesRequest.Validate if the designated constraints aren't met.
type FeedArticlesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedArticlesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedArticlesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedArticlesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedArticlesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedArticlesRequestValidationError) ErrorName() string {
	return "FeedArticlesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedArticlesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedArticlesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedArticlesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedArticlesRequestValidationError{}

// Validate checks the field values on ListArticlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListArticlesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArticlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListArticlesRequestMultiError, or nil if none found.
func (m *ListArticlesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArticlesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	// no validation rules for Author

	// no validation rules for Facorited

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListArticlesRequestMultiError(errors)
	}

	return nil
}

// ListArticlesRequestMultiError is an error wrapping multiple validation
// errors returned by ListArticlesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListArticlesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArticlesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArticlesRequestMultiError) AllErrors() []error { return m }

// ListArticlesRequestValidationError is the validation error returned by
// ListArticlesRequest.Validate if the designated constraints aren't met.
type ListArticlesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArticlesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArticlesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArticlesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArticlesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArticlesRequestValidationError) ErrorName() string {
	return "ListArticlesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArticlesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArticlesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArticlesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArticlesRequestValidationError{}

// Validate checks the field values on UnFollowUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnFollowUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnFollowUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnFollowUserRequestMultiError, or nil if none found.
func (m *UnFollowUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnFollowUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return UnFollowUserRequestMultiError(errors)
	}

	return nil
}

// UnFollowUserRequestMultiError is an error wrapping multiple validation
// errors returned by UnFollowUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UnFollowUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnFollowUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnFollowUserRequestMultiError) AllErrors() []error { return m }

// UnFollowUserRequestValidationError is the validation error returned by
// UnFollowUserRequest.Validate if the designated constraints aren't met.
type UnFollowUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnFollowUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnFollowUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnFollowUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnFollowUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnFollowUserRequestValidationError) ErrorName() string {
	return "UnFollowUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnFollowUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnFollowUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnFollowUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnFollowUserRequestValidationError{}

// Validate checks the field values on FollowUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FollowUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowUserRequestMultiError, or nil if none found.
func (m *FollowUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return FollowUserRequestMultiError(errors)
	}

	return nil
}

// FollowUserRequestMultiError is an error wrapping multiple validation errors
// returned by FollowUserRequest.ValidateAll() if the designated constraints
// aren't met.
type FollowUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowUserRequestMultiError) AllErrors() []error { return m }

// FollowUserRequestValidationError is the validation error returned by
// FollowUserRequest.Validate if the designated constraints aren't met.
type FollowUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowUserRequestValidationError) ErrorName() string {
	return "FollowUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FollowUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowUserRequestValidationError{}

// Validate checks the field values on GetProfileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileRequestMultiError, or nil if none found.
func (m *GetProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return GetProfileRequestMultiError(errors)
	}

	return nil
}

// GetProfileRequestMultiError is an error wrapping multiple validation errors
// returned by GetProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileRequestMultiError) AllErrors() []error { return m }

// GetProfileRequestValidationError is the validation error returned by
// GetProfileRequest.Validate if the designated constraints aren't met.
type GetProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileRequestValidationError) ErrorName() string {
	return "GetProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileRequestValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UserReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserReplyMultiError, or nil
// if none found.
func (m *UserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserReplyMultiError(errors)
	}

	return nil
}

// UserReplyMultiError is an error wrapping multiple validation errors returned
// by UserReply.ValidateAll() if the designated constraints aren't met.
type UserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserReplyMultiError) AllErrors() []error { return m }

// UserReplyValidationError is the validation error returned by
// UserReply.Validate if the designated constraints aren't met.
type UserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReplyValidationError) ErrorName() string { return "UserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReplyValidationError{}

// Validate checks the field values on ProfileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileReplyMultiError, or
// nil if none found.
func (m *ProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Bio

	// no validation rules for Image

	// no validation rules for Following

	if len(errors) > 0 {
		return ProfileReplyMultiError(errors)
	}

	return nil
}

// ProfileReplyMultiError is an error wrapping multiple validation errors
// returned by ProfileReply.ValidateAll() if the designated constraints aren't met.
type ProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReplyMultiError) AllErrors() []error { return m }

// ProfileReplyValidationError is the validation error returned by
// ProfileReply.Validate if the designated constraints aren't met.
type ProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReplyValidationError) ErrorName() string { return "ProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e ProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReplyValidationError{}

// Validate checks the field values on SingleArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleArticleReplyMultiError, or nil if none found.
func (m *SingleArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArticle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleArticleReplyValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleArticleReplyValidationError{
				field:  "Article",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SingleArticleReplyMultiError(errors)
	}

	return nil
}

// SingleArticleReplyMultiError is an error wrapping multiple validation errors
// returned by SingleArticleReply.ValidateAll() if the designated constraints
// aren't met.
type SingleArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleArticleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleArticleReplyMultiError) AllErrors() []error { return m }

// SingleArticleReplyValidationError is the validation error returned by
// SingleArticleReply.Validate if the designated constraints aren't met.
type SingleArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleArticleReplyValidationError) ErrorName() string {
	return "SingleArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SingleArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleArticleReplyValidationError{}

// Validate checks the field values on MultipleArticlesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultipleArticlesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleArticlesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultipleArticlesReplyMultiError, or nil if none found.
func (m *MultipleArticlesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleArticlesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultipleArticlesReplyValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultipleArticlesReplyValidationError{
						field:  fmt.Sprintf("Articles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultipleArticlesReplyValidationError{
					field:  fmt.Sprintf("Articles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ArticlesCount

	if len(errors) > 0 {
		return MultipleArticlesReplyMultiError(errors)
	}

	return nil
}

// MultipleArticlesReplyMultiError is an error wrapping multiple validation
// errors returned by MultipleArticlesReply.ValidateAll() if the designated
// constraints aren't met.
type MultipleArticlesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleArticlesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleArticlesReplyMultiError) AllErrors() []error { return m }

// MultipleArticlesReplyValidationError is the validation error returned by
// MultipleArticlesReply.Validate if the designated constraints aren't met.
type MultipleArticlesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleArticlesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleArticlesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleArticlesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleArticlesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleArticlesReplyValidationError) ErrorName() string {
	return "MultipleArticlesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleArticlesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleArticlesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleArticlesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleArticlesReplyValidationError{}

// Validate checks the field values on SingleCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleCommentReplyMultiError, or nil if none found.
func (m *SingleCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleCommentReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleCommentReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleCommentReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SingleCommentReplyMultiError(errors)
	}

	return nil
}

// SingleCommentReplyMultiError is an error wrapping multiple validation errors
// returned by SingleCommentReply.ValidateAll() if the designated constraints
// aren't met.
type SingleCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleCommentReplyMultiError) AllErrors() []error { return m }

// SingleCommentReplyValidationError is the validation error returned by
// SingleCommentReply.Validate if the designated constraints aren't met.
type SingleCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleCommentReplyValidationError) ErrorName() string {
	return "SingleCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SingleCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleCommentReplyValidationError{}

// Validate checks the field values on MultipleCommentsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultipleCommentsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleCommentsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultipleCommentsReplyMultiError, or nil if none found.
func (m *MultipleCommentsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleCommentsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultipleCommentsReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultipleCommentsReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultipleCommentsReplyValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MultipleCommentsReplyMultiError(errors)
	}

	return nil
}

// MultipleCommentsReplyMultiError is an error wrapping multiple validation
// errors returned by MultipleCommentsReply.ValidateAll() if the designated
// constraints aren't met.
type MultipleCommentsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleCommentsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleCommentsReplyMultiError) AllErrors() []error { return m }

// MultipleCommentsReplyValidationError is the validation error returned by
// MultipleCommentsReply.Validate if the designated constraints aren't met.
type MultipleCommentsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleCommentsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleCommentsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleCommentsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleCommentsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleCommentsReplyValidationError) ErrorName() string {
	return "MultipleCommentsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleCommentsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleCommentsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleCommentsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleCommentsReplyValidationError{}

// Validate checks the field values on ListTagsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTagsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTagsReplyMultiError, or
// nil if none found.
func (m *ListTagsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTagsReplyMultiError(errors)
	}

	return nil
}

// ListTagsReplyMultiError is an error wrapping multiple validation errors
// returned by ListTagsReply.ValidateAll() if the designated constraints
// aren't met.
type ListTagsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsReplyMultiError) AllErrors() []error { return m }

// ListTagsReplyValidationError is the validation error returned by
// ListTagsReply.Validate if the designated constraints aren't met.
type ListTagsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsReplyValidationError) ErrorName() string { return "ListTagsReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on AddCommentRequest_Comment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentRequest_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRequest_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentRequest_CommentMultiError, or nil if none found.
func (m *AddCommentRequest_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRequest_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if len(errors) > 0 {
		return AddCommentRequest_CommentMultiError(errors)
	}

	return nil
}

// AddCommentRequest_CommentMultiError is an error wrapping multiple validation
// errors returned by AddCommentRequest_Comment.ValidateAll() if the
// designated constraints aren't met.
type AddCommentRequest_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRequest_CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRequest_CommentMultiError) AllErrors() []error { return m }

// AddCommentRequest_CommentValidationError is the validation error returned by
// AddCommentRequest_Comment.Validate if the designated constraints aren't met.
type AddCommentRequest_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequest_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequest_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequest_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequest_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequest_CommentValidationError) ErrorName() string {
	return "AddCommentRequest_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequest_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequest_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequest_CommentValidationError{}

// Validate checks the field values on UpdateArticleRequest_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArticleRequest_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArticleRequest_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArticleRequest_ArticleMultiError, or nil if none found.
func (m *UpdateArticleRequest_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArticleRequest_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return UpdateArticleRequest_ArticleMultiError(errors)
	}

	return nil
}

// UpdateArticleRequest_ArticleMultiError is an error wrapping multiple
// validation errors returned by UpdateArticleRequest_Article.ValidateAll() if
// the designated constraints aren't met.
type UpdateArticleRequest_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArticleRequest_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArticleRequest_ArticleMultiError) AllErrors() []error { return m }

// UpdateArticleRequest_ArticleValidationError is the validation error returned
// by UpdateArticleRequest_Article.Validate if the designated constraints
// aren't met.
type UpdateArticleRequest_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArticleRequest_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArticleRequest_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArticleRequest_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArticleRequest_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArticleRequest_ArticleValidationError) ErrorName() string {
	return "UpdateArticleRequest_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArticleRequest_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArticleRequest_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArticleRequest_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArticleRequest_ArticleValidationError{}

// Validate checks the field values on CreateArticleRequest_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleRequest_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleRequest_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleRequest_ArticleMultiError, or nil if none found.
func (m *CreateArticleRequest_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleRequest_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Body

	if len(errors) > 0 {
		return CreateArticleRequest_ArticleMultiError(errors)
	}

	return nil
}

// CreateArticleRequest_ArticleMultiError is an error wrapping multiple
// validation errors returned by CreateArticleRequest_Article.ValidateAll() if
// the designated constraints aren't met.
type CreateArticleRequest_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleRequest_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleRequest_ArticleMultiError) AllErrors() []error { return m }

// CreateArticleRequest_ArticleValidationError is the validation error returned
// by CreateArticleRequest_Article.Validate if the designated constraints
// aren't met.
type CreateArticleRequest_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleRequest_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleRequest_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleRequest_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleRequest_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleRequest_ArticleValidationError) ErrorName() string {
	return "CreateArticleRequest_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleRequest_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleRequest_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleRequest_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleRequest_ArticleValidationError{}

// Validate checks the field values on UpdateUserRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequest_UserMultiError, or nil if none found.
func (m *UpdateUserRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Token

	// no validation rules for Username

	// no validation rules for Bio

	// no validation rules for Image

	if len(errors) > 0 {
		return UpdateUserRequest_UserMultiError(errors)
	}

	return nil
}

// UpdateUserRequest_UserMultiError is an error wrapping multiple validation
// errors returned by UpdateUserRequest_User.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequest_UserMultiError) AllErrors() []error { return m }

// UpdateUserRequest_UserValidationError is the validation error returned by
// UpdateUserRequest_User.Validate if the designated constraints aren't met.
type UpdateUserRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequest_UserValidationError) ErrorName() string {
	return "UpdateUserRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequest_UserValidationError{}

// Validate checks the field values on UserReply_User with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserReply_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserReply_UserMultiError,
// or nil if none found.
func (m *UserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *UserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Token

	// no validation rules for Username

	// no validation rules for Bio

	// no validation rules for Image

	if len(errors) > 0 {
		return UserReply_UserMultiError(errors)
	}

	return nil
}

// UserReply_UserMultiError is an error wrapping multiple validation errors
// returned by UserReply_User.ValidateAll() if the designated constraints
// aren't met.
type UserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserReply_UserMultiError) AllErrors() []error { return m }

// UserReply_UserValidationError is the validation error returned by
// UserReply_User.Validate if the designated constraints aren't met.
type UserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReply_UserValidationError) ErrorName() string { return "UserReply_UserValidationError" }

// Error satisfies the builtin error interface
func (e UserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReply_UserValidationError{}

// Validate checks the field values on SingleArticleReply_Author with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleArticleReply_Author) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleArticleReply_Author with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleArticleReply_AuthorMultiError, or nil if none found.
func (m *SingleArticleReply_Author) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleArticleReply_Author) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Bio

	// no validation rules for Image

	// no validation rules for Following

	if len(errors) > 0 {
		return SingleArticleReply_AuthorMultiError(errors)
	}

	return nil
}

// SingleArticleReply_AuthorMultiError is an error wrapping multiple validation
// errors returned by SingleArticleReply_Author.ValidateAll() if the
// designated constraints aren't met.
type SingleArticleReply_AuthorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleArticleReply_AuthorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleArticleReply_AuthorMultiError) AllErrors() []error { return m }

// SingleArticleReply_AuthorValidationError is the validation error returned by
// SingleArticleReply_Author.Validate if the designated constraints aren't met.
type SingleArticleReply_AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleArticleReply_AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleArticleReply_AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleArticleReply_AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleArticleReply_AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleArticleReply_AuthorValidationError) ErrorName() string {
	return "SingleArticleReply_AuthorValidationError"
}

// Error satisfies the builtin error interface
func (e SingleArticleReply_AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleArticleReply_Author.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleArticleReply_AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleArticleReply_AuthorValidationError{}

// Validate checks the field values on SingleArticleReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleArticleReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleArticleReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleArticleReply_ArticleMultiError, or nil if none found.
func (m *SingleArticleReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleArticleReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleArticleReply_ArticleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleArticleReply_ArticleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleArticleReply_ArticleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleArticleReply_ArticleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleArticleReply_ArticleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleArticleReply_ArticleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Favorited

	// no validation rules for FavoritesCount

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleArticleReply_ArticleValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleArticleReply_ArticleValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleArticleReply_ArticleValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SingleArticleReply_ArticleMultiError(errors)
	}

	return nil
}

// SingleArticleReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by SingleArticleReply_Article.ValidateAll() if
// the designated constraints aren't met.
type SingleArticleReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleArticleReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleArticleReply_ArticleMultiError) AllErrors() []error { return m }

// SingleArticleReply_ArticleValidationError is the validation error returned
// by SingleArticleReply_Article.Validate if the designated constraints aren't met.
type SingleArticleReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleArticleReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleArticleReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleArticleReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleArticleReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleArticleReply_ArticleValidationError) ErrorName() string {
	return "SingleArticleReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e SingleArticleReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleArticleReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleArticleReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleArticleReply_ArticleValidationError{}

// Validate checks the field values on MultipleArticlesReply_Author with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultipleArticlesReply_Author) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleArticlesReply_Author with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultipleArticlesReply_AuthorMultiError, or nil if none found.
func (m *MultipleArticlesReply_Author) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleArticlesReply_Author) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Bio

	// no validation rules for Image

	// no validation rules for Following

	if len(errors) > 0 {
		return MultipleArticlesReply_AuthorMultiError(errors)
	}

	return nil
}

// MultipleArticlesReply_AuthorMultiError is an error wrapping multiple
// validation errors returned by MultipleArticlesReply_Author.ValidateAll() if
// the designated constraints aren't met.
type MultipleArticlesReply_AuthorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleArticlesReply_AuthorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleArticlesReply_AuthorMultiError) AllErrors() []error { return m }

// MultipleArticlesReply_AuthorValidationError is the validation error returned
// by MultipleArticlesReply_Author.Validate if the designated constraints
// aren't met.
type MultipleArticlesReply_AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleArticlesReply_AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleArticlesReply_AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleArticlesReply_AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleArticlesReply_AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleArticlesReply_AuthorValidationError) ErrorName() string {
	return "MultipleArticlesReply_AuthorValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleArticlesReply_AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleArticlesReply_Author.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleArticlesReply_AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleArticlesReply_AuthorValidationError{}

// Validate checks the field values on MultipleArticlesReply_Articles with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultipleArticlesReply_Articles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleArticlesReply_Articles with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MultipleArticlesReply_ArticlesMultiError, or nil if none found.
func (m *MultipleArticlesReply_Articles) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleArticlesReply_Articles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Slug

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultipleArticlesReply_ArticlesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultipleArticlesReply_ArticlesValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultipleArticlesReply_ArticlesValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultipleArticlesReply_ArticlesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultipleArticlesReply_ArticlesValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultipleArticlesReply_ArticlesValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Favorited

	// no validation rules for FavoritesCount

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultipleArticlesReply_ArticlesValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultipleArticlesReply_ArticlesValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultipleArticlesReply_ArticlesValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MultipleArticlesReply_ArticlesMultiError(errors)
	}

	return nil
}

// MultipleArticlesReply_ArticlesMultiError is an error wrapping multiple
// validation errors returned by MultipleArticlesReply_Articles.ValidateAll()
// if the designated constraints aren't met.
type MultipleArticlesReply_ArticlesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleArticlesReply_ArticlesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleArticlesReply_ArticlesMultiError) AllErrors() []error { return m }

// MultipleArticlesReply_ArticlesValidationError is the validation error
// returned by MultipleArticlesReply_Articles.Validate if the designated
// constraints aren't met.
type MultipleArticlesReply_ArticlesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleArticlesReply_ArticlesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleArticlesReply_ArticlesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleArticlesReply_ArticlesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleArticlesReply_ArticlesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleArticlesReply_ArticlesValidationError) ErrorName() string {
	return "MultipleArticlesReply_ArticlesValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleArticlesReply_ArticlesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleArticlesReply_Articles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleArticlesReply_ArticlesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleArticlesReply_ArticlesValidationError{}

// Validate checks the field values on SingleCommentReply_Author with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleCommentReply_Author) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleCommentReply_Author with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleCommentReply_AuthorMultiError, or nil if none found.
func (m *SingleCommentReply_Author) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleCommentReply_Author) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Bio

	// no validation rules for Image

	// no validation rules for Following

	if len(errors) > 0 {
		return SingleCommentReply_AuthorMultiError(errors)
	}

	return nil
}

// SingleCommentReply_AuthorMultiError is an error wrapping multiple validation
// errors returned by SingleCommentReply_Author.ValidateAll() if the
// designated constraints aren't met.
type SingleCommentReply_AuthorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleCommentReply_AuthorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleCommentReply_AuthorMultiError) AllErrors() []error { return m }

// SingleCommentReply_AuthorValidationError is the validation error returned by
// SingleCommentReply_Author.Validate if the designated constraints aren't met.
type SingleCommentReply_AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleCommentReply_AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleCommentReply_AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleCommentReply_AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleCommentReply_AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleCommentReply_AuthorValidationError) ErrorName() string {
	return "SingleCommentReply_AuthorValidationError"
}

// Error satisfies the builtin error interface
func (e SingleCommentReply_AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleCommentReply_Author.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleCommentReply_AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleCommentReply_AuthorValidationError{}

// Validate checks the field values on SingleCommentReply_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleCommentReply_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleCommentReply_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleCommentReply_CommentMultiError, or nil if none found.
func (m *SingleCommentReply_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleCommentReply_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleCommentReply_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleCommentReply_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleCommentReply_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleCommentReply_CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleCommentReply_CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleCommentReply_CommentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleCommentReply_CommentValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleCommentReply_CommentValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleCommentReply_CommentValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SingleCommentReply_CommentMultiError(errors)
	}

	return nil
}

// SingleCommentReply_CommentMultiError is an error wrapping multiple
// validation errors returned by SingleCommentReply_Comment.ValidateAll() if
// the designated constraints aren't met.
type SingleCommentReply_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleCommentReply_CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleCommentReply_CommentMultiError) AllErrors() []error { return m }

// SingleCommentReply_CommentValidationError is the validation error returned
// by SingleCommentReply_Comment.Validate if the designated constraints aren't met.
type SingleCommentReply_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleCommentReply_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleCommentReply_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleCommentReply_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleCommentReply_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleCommentReply_CommentValidationError) ErrorName() string {
	return "SingleCommentReply_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e SingleCommentReply_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleCommentReply_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleCommentReply_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleCommentReply_CommentValidationError{}

// Validate checks the field values on MultipleCommentsReply_Author with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultipleCommentsReply_Author) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleCommentsReply_Author with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultipleCommentsReply_AuthorMultiError, or nil if none found.
func (m *MultipleCommentsReply_Author) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleCommentsReply_Author) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Bio

	// no validation rules for Image

	// no validation rules for Following

	if len(errors) > 0 {
		return MultipleCommentsReply_AuthorMultiError(errors)
	}

	return nil
}

// MultipleCommentsReply_AuthorMultiError is an error wrapping multiple
// validation errors returned by MultipleCommentsReply_Author.ValidateAll() if
// the designated constraints aren't met.
type MultipleCommentsReply_AuthorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleCommentsReply_AuthorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleCommentsReply_AuthorMultiError) AllErrors() []error { return m }

// MultipleCommentsReply_AuthorValidationError is the validation error returned
// by MultipleCommentsReply_Author.Validate if the designated constraints
// aren't met.
type MultipleCommentsReply_AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleCommentsReply_AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleCommentsReply_AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleCommentsReply_AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleCommentsReply_AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleCommentsReply_AuthorValidationError) ErrorName() string {
	return "MultipleCommentsReply_AuthorValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleCommentsReply_AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleCommentsReply_Author.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleCommentsReply_AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleCommentsReply_AuthorValidationError{}

// Validate checks the field values on MultipleCommentsReply_Comments with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultipleCommentsReply_Comments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleCommentsReply_Comments with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MultipleCommentsReply_CommentsMultiError, or nil if none found.
func (m *MultipleCommentsReply_Comments) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleCommentsReply_Comments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultipleCommentsReply_CommentsValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultipleCommentsReply_CommentsValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultipleCommentsReply_CommentsValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultipleCommentsReply_CommentsValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultipleCommentsReply_CommentsValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultipleCommentsReply_CommentsValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultipleCommentsReply_CommentsValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultipleCommentsReply_CommentsValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultipleCommentsReply_CommentsValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MultipleCommentsReply_CommentsMultiError(errors)
	}

	return nil
}

// MultipleCommentsReply_CommentsMultiError is an error wrapping multiple
// validation errors returned by MultipleCommentsReply_Comments.ValidateAll()
// if the designated constraints aren't met.
type MultipleCommentsReply_CommentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleCommentsReply_CommentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleCommentsReply_CommentsMultiError) AllErrors() []error { return m }

// MultipleCommentsReply_CommentsValidationError is the validation error
// returned by MultipleCommentsReply_Comments.Validate if the designated
// constraints aren't met.
type MultipleCommentsReply_CommentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleCommentsReply_CommentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleCommentsReply_CommentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleCommentsReply_CommentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleCommentsReply_CommentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleCommentsReply_CommentsValidationError) ErrorName() string {
	return "MultipleCommentsReply_CommentsValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleCommentsReply_CommentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleCommentsReply_Comments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleCommentsReply_CommentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleCommentsReply_CommentsValidationError{}

// Validate checks the field values on LoginRequest_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginRequest_UserMultiError, or nil if none found.
func (m *LoginRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequest_UserMultiError(errors)
	}

	return nil
}

// LoginRequest_UserMultiError is an error wrapping multiple validation errors
// returned by LoginRequest_User.ValidateAll() if the designated constraints
// aren't met.
type LoginRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequest_UserMultiError) AllErrors() []error { return m }

// LoginRequest_UserValidationError is the validation error returned by
// LoginRequest_User.Validate if the designated constraints aren't met.
type LoginRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_UserValidationError) ErrorName() string {
	return "LoginRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_UserValidationError{}

// Validate checks the field values on RegisterRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequest_UserMultiError, or nil if none found.
func (m *RegisterRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterRequest_UserMultiError(errors)
	}

	return nil
}

// RegisterRequest_UserMultiError is an error wrapping multiple validation
// errors returned by RegisterRequest_User.ValidateAll() if the designated
// constraints aren't met.
type RegisterRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequest_UserMultiError) AllErrors() []error { return m }

// RegisterRequest_UserValidationError is the validation error returned by
// RegisterRequest_User.Validate if the designated constraints aren't met.
type RegisterRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequest_UserValidationError) ErrorName() string {
	return "RegisterRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequest_UserValidationError{}
